#!/usr/bin/env bash

# Blocks a single site by adding a line to the hosts file that redirects it to
# localhost.
block() {
    local site=$1

    if grep -q "$site # blk" /etc/hosts; then
        echo "$site is already blocked!"
        return 1
    else
        echo -e "127.0.0.1\t$site # blk" | tee -a /etc/hosts > /dev/null
    fi
}

# Unblocks a single site by removing its redirection from the hosts file.
unblock() {
    local site=$1

    if grep -q "$site # blk" /etc/hosts; then
        sed -i'.bak' $'/^.*\t'"$site"' # blk/d' /etc/hosts
    else
        echo "$site is not blocked!"
        return 1
    fi
}

# Lists all sites currently blocked by blk.
list() {
    # 1. Find all lines with the tag # blk.
    # 2. Remove everything before and including the first tab character (the url to redirect to).
    # 3. Remove the blk tag.
    grep '# blk' /etc/hosts | sed $'s/^.*\t//g' | sed 's/# blk//g'
}

# Converts two arguments on the form <number> <time unit> to seconds.
# Example: 'to_seconds 2 minutes' returns 120.
to_seconds() {
    local time_amount=$1
    local time_unit=$2

    local time_multiplier=0
    case $time_unit in
        'second'|'seconds')
            time_multiplier=1
            ;;
        'minute'|'minutes')
            time_multiplier=60
            ;;
        'hour'|'hours')
            time_multiplier=3600
            ;;
        'day'|'days')
            time_multiplier=86400
            ;;
    esac

    local seconds=$((time_amount*time_multiplier))
    echo $seconds
}

blk=$0
action=$1
shift

case $action in
    'list')
        echo 'Currently blocked websites:'
        list | xargs -n1 -I {} echo '- {}'
        ;;
    'unblock-all')
        list | $blk 'unblock' "$@" # $@ == all parameters after 'unblock-all'.
        ;;
    'block'|'unblock')
        sites=()
        mode='simple'

        while test ${#} -gt 0; do # Loops through all arguments with shift.
            case $1 in
                'for')
                    shift
                    time_amount=$1
                    shift
                    time_unit=$1
                    mode='for'
                    ;;
                'until')
                    shift
                    until=$1
                    mode='until'
                    ;;
                *)
                    sites+=($1)
                    ;;
            esac
            shift
        done

        if [[ ! -t 0 ]]; then # Checks if stdin exists (if data is being fed through pipe).
            while read -r pipe; do
                sites+=($pipe)
            done
        fi

        modified_sites=()

        for site in "${sites[@]}"; do
            eval "${action}" "$site"
            if [[ $? == 0 ]]; then
                modified_sites+=($site)
            fi
        done

        case $action in
            'block')
                reverse_fn='unblock'
                ;;
            'unblock')
                reverse_fn='block'
                ;;
        esac

        if [[ ${#modified_sites[@]} -gt 0 ]]; then # Checks if number of elements in array is greater than 0.
            case $mode in
                'for')
                    seconds=$(to_seconds "$time_amount" "$time_unit")
                    (sleep "$seconds"; $blk $reverse_fn "${modified_sites[*]}" >& /dev/null)&
                    ;;
                'until')
                    echo "$blk $reverse_fn ${modified_sites[*]}" | at "$until"
                    ;;
            esac
        fi

        $blk list
        ;;
esac
